#!/usr/bin/env bash

: << !
Name: post-checkout
Author: YJ
Email: yj1516268@outlook.com
Created Time: 2022-10-25 11:00:39

Description: Git hook，checkout后将子模块也切换到同名分支

Attentions:
-

Depends:
-
!

####################################################################
#+++++++++++++++++++++++++ Define Variable ++++++++++++++++++++++++#
####################################################################
#------------------------- Exit Code Variable
readonly normal=0   # 一切正常
readonly err_file=1 # 文件/路径类错误

#------------------------- Parameter Variable
# 获取父模块所在的文件夹名
parent_name=$(basename "$(realpath .)")
# 获取父模块所在的完整路径
parent_path=$(realpath .)
# 获取父模块当前所在分支
parent_branch=$(git symbolic-ref --short HEAD)

####################################################################
#+++++++++++++++++++++++++ Define Function ++++++++++++++++++++++++#
####################################################################
#------------------------- Feature Function
function getBranchs() {
  # 获取仓库所有分支名并格式化
  order1=$(git branch)
  order2=("${order1//\*/ }")
  order3=("$(echo "${order2[*]}" | tr '\n' ' ')")
  order4=$(eval echo "${order3[*]}")
  order5=("${order4//  /}")
  branchs=("${order5// /, }")
}

function isGitrepo() {
  # 判断给定的文件夹是不是git仓库
  if [ -a "$1"/.git ]; then
    return "$normal"
  else
    return "$err_file"
  fi
}

function haveBranch() {
  # 判断git仓库是否有指定名字的分支
  cd "$1" || exit "$err_file"
  if git show-ref --quiet --heads "$parent_branch"; then
    return "$normal"
  else
    return "$err_file"
  fi
}

function checkoutBranch() {
  # 切换分支
  cd "$1" || exit "$err_file"
  git checkout --quiet "$2"
}

####################################################################
#++++++++++++++++++++++++++++++ Main ++++++++++++++++++++++++++++++#
####################################################################
getBranchs

echo -e "\033[1m$parent_name\033[0m: \033[35;40;1m$parent_branch\033[0m"

for file in "$parent_path"/* ; do
  if isGitrepo "$file"; then
    if haveBranch "$file"; then
      sub_name=$(basename "$(realpath "$file")")
      pre_sub_branch=$(git symbolic-ref --short HEAD)
      if [[ "$pre_sub_branch" == "$parent_branch" ]]; then
        echo -e "\033[4C\033[1m$sub_name\033[0m: \033[35;40;1m$pre_sub_branch\033[0m"
      else
        checkoutBranch "$file" "$parent_branch"
        post_sub_branch=$(git symbolic-ref --short HEAD)
        echo -e "\033[4C\033[1m$sub_name\033[0m: \033[34m$pre_sub_branch\033[0m -> \033[35;40;1m$post_sub_branch\033[0m"
      fi
    fi
  fi
done

echo -e "\033[1m$parent_name\033[0m branchs: \033[36m${branchs[*]}\033[0m"
